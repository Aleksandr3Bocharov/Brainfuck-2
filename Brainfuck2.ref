* Copyright 2023 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt
* 2023-07-14
* https://github.com/Aleksandr3Bocharov/Brainfuck-2

/* 

Brainfuck 2

Программа "Brainfuck 2" написана на языке программирования Рефал-05.
https://github.com/Mazdaywik/Refal-05

Программа "Brainfuck 2" интерпретирует код на языке Brainfuck из исходного файла 'filename.bf'
и компилирует его в код на языке C в файл назначения 'filename.bf.c'.


ИСПОЛЬЗОВАНИЕ:
    brainfuck2 [filename[.bf]]


где
    filename        Имя исходного файла и файла назначения.


Имя по умолчанию исходного файла 'brainfuck.bf'
и файла назначения 'brainfuck.bf.c'.


Если исходный файл 'filename.bf' не существует,
то происходит FATAL_ERROR(1) и программа завершает работу.


Файл назначения 'filename.bf.c' будет перезаписан, если он существует.



*/

$EXTERN Map, MapAccum, DelAccumulator, LoadFile, SaveFile, Inc, Dec;

%%
#include <stdio.h>
%%

/* 

<Putchar e.Char> == * empty *

e.Char ::= s.CHAR? | s.CHAR e.ANY-EXPR

*/
Putchar {
%%
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  int putchar_res = 0;
  refalrts::Iter p = content_b, end = content_e;
  
  if (! refalrts::empty_seq(p, end)) 
    switch(p->tag) 
	  {
      case refalrts::cDataChar:
        putchar_res = printf("%c", p->char_info);
		    break;

      default:
	      return refalrts::cRecognitionImpossible;
    }

  if (putchar_res < 0) 
    return refalrts::cRecognitionImpossible;

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
%%
}

/*

<GetChar> == s.Char

s.Char ::= s.CHAR

*/
GetChar {
%%
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);
	
  if (! refalrts::empty_seq(content_b, content_e)) 
    return refalrts::cRecognitionImpossible;
	
  refalrts::reset_allocator(vm);
  refalrts::Iter dummy = 0;

  int cur_char = getchar();
  refalrts::alloc_char(vm, dummy, static_cast<char>(cur_char));

  refalrts::splice_from_freelist(vm, arg_begin);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
%%
}

/*

<RU e.String> == e.String

e.String ::= s.CHAR*

*/
RU {
  =
    ;
  'Ё' e.RestChars =
    <Chr 240> <RU e.RestChars>;
  'ё' e.RestChars =
    <Chr 241> <RU e.RestChars>;
  s.Char1 s.Char2 e.RestChars,
  <isRU s.Char1 s.Char2>:208 =
    <Chr <Sub <Ord s.Char2> 16>> <RU e.RestChars>;
  s.Char1 s.Char2 e.RestChars,
  <isRU s.Char1 s.Char2>:209 =
    <Chr <Add <Ord s.Char2> 96>> <RU e.RestChars>;
  s.Char e.RestChars =
    s.Char <RU e.RestChars>;
}
  
/*
  
<isRU e.Char> == s.isRU
  
e.Char ::= s.CHAR s.CHAR
s.isRU ::= 208 | 209 | False
  
*/
isRU {
  e.Char,
  <Ord e.Char>: 208 s.OrdChar2,
  <Compare s.OrdChar2 143>: '+',
  <Compare s.OrdChar2 192>: '-' =
    208;
  e.Char,
  <Ord e.Char>: 209 s.OrdChar2,
  <Compare s.OrdChar2 127>: '+',
  <Compare s.OrdChar2 144>: '-' =
    209;
  e.Char =
    False
}

* Вывод справки
Help {
  = <Prout
      <RU
        '\nПрограмма "Brainfuck 2" интерпретирует код на языке Brainfuck из исходного файла \'filename.bf\'\n'
        'и компилирует его в код на языке C в файл назначения \'filename.bf.c\'.\n\n\n'
        'ИСПОЛЬЗОВАНИЕ:\n'
        '    brainfuck2 [filename[.bf]]\n\n\n'
        'где\n'
        '    filename        Имя исходного файла и файла назначения.\n\n\n'
        'Имя по умолчанию исходного файла \'brainfuck.bf\'\n'
        'и файла назначения \'brainfuck.bf.c\'.\n\n\n'
        'Если исходный файл \'filename.bf\' не существует,\n'
        'то происходит FATAL_ERROR(1) и программа завершает работу.\n\n\n'
        'Файл назначения \'filename.bf.c\' будет перезаписан, если он существует.\n\n\n'
      >
    >
}

/*

<Interpretator e.Parsing_Tree> == 

e.Parsing_Tree ::= t.LeafNode*
t.LeafNode ::= s.Leaf | (t.LeafNode*)
s.Leaf ::= Next | Prev | Inc | Dec | Write | Read

*/
Interpretator {
  e.Parsing_Tree =
    <DoInterpretator e.Parsing_Tree () 0 ()>: e._ =
}

/*

<DoInterpretator e.Parsing_Tree e.Cells> ==

e.Parsing_Tree ::= t.LeafNode*
t.LeafNode ::= s.Leaf | (t.LeafNode*)
s.Leaf ::= Next | Prev | Inc | Dec | Write | Read
e.Cells ::= (e.BeforeCells) s.Cell (e.AfterCells)
e.BeforeCells, e.AfterCells ::= s.NUMBER*
s.Cell ::= s.NUMBER

*/
DoInterpretator {
  (e.BeforeCells) s.Cell (e.AfterCells) =
    (e.BeforeCells) s.Cell (e.AfterCells);
  Next e.Rest_Parsing_Tree (e.BeforeCells) s.Cell () =
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells s.Cell) 0 ()>;
  Next e.Rest_Parsing_Tree (e.BeforeCells) s.Cell (s.NextCell e.AfterCells) =
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells s.Cell) s.NextCell (e.AfterCells)>;    
  Prev e.Rest_Parsing_Tree () s.Cell (e.AfterCells) =
    <DoInterpretator e.Rest_Parsing_Tree () 0 (s.Cell e.AfterCells)>;
  Prev e.Rest_Parsing_Tree (e.BeforeCells s.PrevCell) s.Cell (e.AfterCells) =
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells) s.PrevCell (s.Cell e.AfterCells)>;    
  Inc e.Rest_Parsing_Tree (e.BeforeCells) 255 (e.AfterCells) =
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells) 0 (e.AfterCells)>;
  Inc e.Rest_Parsing_Tree (e.BeforeCells) s.Cell (e.AfterCells) =
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells) <Inc s.Cell> (e.AfterCells)>;     							
  Dec e.Rest_Parsing_Tree (e.BeforeCells) 0 (e.AfterCells) =
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells) 255 (e.AfterCells)>;
  Dec e.Rest_Parsing_Tree (e.BeforeCells) s.Cell (e.AfterCells) =
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells) <Dec s.Cell> (e.AfterCells)>;    
  Write e.Rest_Parsing_Tree (e.BeforeCells) s.Cell (e.AfterCells) =
    <Putchar <Chr s.Cell>> 
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells) s.Cell (e.AfterCells)>;												
  Read e.Rest_Parsing_Tree (e.BeforeCells) s._ (e.AfterCells) =
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells) <Ord <GetChar>> (e.AfterCells)>;						
  (e.LeafNode) e.Rest_Parsing_Tree (e.BeforeCells) 0 (e.AfterCells) =
    <DoInterpretator e.Rest_Parsing_Tree (e.BeforeCells) 0 (e.AfterCells)>;
  (e.LeafNode) e.Rest_Parsing_Tree (e.BeforeCells) s.Cell (e.AfterCells) =
    <DoInterpretator e.LeafNode (e.BeforeCells) s.Cell (e.AfterCells)>: e.Cells =
    <DoInterpretator (e.LeafNode) e.Rest_Parsing_Tree e.Cells>   
}

/*

<CompiletoC e.Parsing_Tree> == t.C_Code

e.Parsing_Tree ::= t.LeafNode*
t.LeafNode ::= s.Leaf | (t.LeafNode*)
s.Leaf ::= Next | Prev | Inc | Dec | Write | Read
t.C_Code ::= (s.CHAR+)

*/
CompiletoC {
  e.Parsing_Tree =
    (
      '#include <memory.h>\n'
      '#include <stdio.h>\n\n'
      'int main(void)\n'
      '{\n'
      '     int i = 0;\n'
      '     unsigned char arr[30000];\n'
      '     memset(arr, 0, sizeof(arr));\n'
      <DoCompiletoC ('     ') e.Parsing_Tree>
      '     return 0;\n'
      '}'
    )	
}

DoCompiletoC {
  (e.Spaces) =
    ;
  (e.Spaces) Next e.Rest_Parsing_Tree =
    e.Spaces 'i++;\n' <DoCompiletoC (e.Spaces) e.Rest_Parsing_Tree>;
  (e.Spaces) Prev e.Rest_Parsing_Tree =
    e.Spaces 'i--;\n' <DoCompiletoC (e.Spaces) e.Rest_Parsing_Tree>;
  (e.Spaces) Inc e.Rest_Parsing_Tree =
    e.Spaces 'arr[i]++;\n' <DoCompiletoC (e.Spaces) e.Rest_Parsing_Tree>;
  (e.Spaces) Dec e.Rest_Parsing_Tree =
    e.Spaces 'arr[i]--;\n' <DoCompiletoC (e.Spaces) e.Rest_Parsing_Tree>;
  (e.Spaces) Write e.Rest_Parsing_Tree =
    e.Spaces 'putchar(arr[i]);\n' <DoCompiletoC (e.Spaces) e.Rest_Parsing_Tree>;
  (e.Spaces) Read e.Rest_Parsing_Tree =
    e.Spaces 'arr[i] = getchar();\n' <DoCompiletoC (e.Spaces) e.Rest_Parsing_Tree>;
  (e.Spaces) (e.LeafNode) e.Rest_Parsing_Tree =
    e.Spaces 'while(arr[i])\n' 
    e.Spaces '{\n' 
    <DoCompiletoC (e.Spaces '     ') e.LeafNode>
    e.Spaces '}\n' 
    <DoCompiletoC (e.Spaces) e.Rest_Parsing_Tree>
}

/* 

<Parser e.Tokens> == e.Parsing_Tree

e.Tokens ::= s.Token*
s.Token ::= '>' | '<' | '+' | '-' | '.' | ',' | '[' | ']' 
e.Parsing_Tree ::= t.LeafNode*
t.LeafNode ::= s.Leaf | (t.LeafNode*)
s.Leaf ::= Next | Prev | Inc | Dec | Write | Read

*/
Parser {
  =
    ;
  '>' e.RestTokens =
    Next <Parser e.RestTokens>;
  '<' e.RestTokens =
    Prev <Parser e.RestTokens>;
  '+' e.RestTokens =
    Inc <Parser e.RestTokens>;    
  '-' e.RestTokens =
    Dec <Parser e.RestTokens>; 
  '.' e.RestTokens =
    Write <Parser e.RestTokens>;
  ',' e.RestTokens =
    Read <Parser e.RestTokens>;
  '[' e.RestTokens =
    <Parser e.RestTokens>: e.LeafNode (e.NewRestTokens) =
    (e.LeafNode) <Parser e.NewRestTokens>;
  ']' e.RestTokens =
    (e.RestTokens)      
}

/* 

<Tokenizer e.Symbols> == e.Tokens | Fails e.Errors

e.Symbols ::= (s.Char s.Row s.Col)* 
s.Char ::= s.CHAR
s.Row, s.Col ::= s.NUMBER
e.Tokens ::= s.Token*
s.Token ::= '>' | '<' | '+' | '-' | '.' | ',' | '[' | ']' 
e.Errors ::= (e.ErrorMessage)+
e.ErrorMessage ::= s.CHAR+

*/
Tokenizer {
  e.Symbols,
  <Br Fails11 '=' >
  <Br Fails12 '=' >
  <Map DoMapTokenizer e.Symbols>:
  {
    e.Tokens,
    <TermCompare (<Cp Fails11>) ()>: '=',
    <TermCompare (<Cp Fails12>) ()>: '=' =
      e.Tokens
      <Rp Fails11 '=' >
      <Rp Fails12 '=' >
      <Dg Fails11>
      <Dg Fails12>;
    e.Tokens =
      Fails
      <Cp Fails11>
      <Cp Fails12>
      <Rp Fails11 '=' >
      <Rp Fails12 '=' >
      <Dg Fails11>
      <Dg Fails12>
  }
}

DoMapTokenizer {
  ('[' s.Row s.Col) =
    <Rp Fails12 '=' <Cp Fails12> (<RU 'SYNTAX_ERROR(12): Отсутствует символ \']\' для символа \'[\' в строке: '> s.Row <RU ' и столбце: '> s.Col '.')>
    '[';
  (']' s.Row s.Col),
  <TermCompare (<Cp Fails12>) ()>: '=' =
    <Rp Fails11 '=' <Cp Fails11> (<RU 'SYNTAX_ERROR(11): Непредвиденный символ \']\' в строке: '> s.Row <RU ' и столбце: '> s.Col '.')>
      ; 
  (']' s.Row s.Col),
  <Cp Fails12>: e.Fails12 (e._) =
    <Rp Fails12 '=' e.Fails12>
    ']';   
  ('>' s.Row s.Col) = 
    '>'; 
  ('<' s.Row s.Col) =
    '<'; 
  ('+' s.Row s.Col) =
    '+'; 
  ('-' s.Row s.Col) =
    '-';
  ('.' s.Row s.Col) =
    '.';
  (',' s.Row s.Col) =
    ',';
  (s.Char s.Row s.Col) =
}
	
DoMapPrintErrors {
  (e.ErrorMessage) =
    <Prout e.ErrorMessage>
}

DoMapPrint {
  s.Row (e.Line) =
    <Inc s.Row> 
    <Prout s.Row ' ' e.Line>
    <DelAccumulator <MapAccum DoMapPrint-Aux 1 e.Line>>	
}

DoMapPrint-Aux {
  s.Col s.Char =
    <Inc s.Col>
    (s.Char s.Row s.Col)
}

$ENTRY Go {
  ,
  /* Аргумент программы - имя файла, где находится код Brainfuck.*/
  <Arg 1>: 
  /* По умолчанию имя файла - 'brainfuck.bf'. Можно в конце имени файла не добавлять расширение .bf */				
  { 
    /* empty */ =
      'brainfuck.bf';
    e.FileName '.bf' =
      e.FileName '.bf';
    e.FileName =
      e.FileName '.bf'
  }:
  e.bfFileName,
  <Help>
  <Prout <RU 'Код на языке Brainfuck из исходного файла '> e.bfFileName ':\n'>
  /* Если файл не существует, то выход из программы. */
  <ExistFile e.bfFileName>:
  {
    False =
      <Prout <RU 'FATAL_ERROR (1): Файл '> e.bfFileName <RU ' не существует.'>>
      <Exit 1>;
    True =
  },
  /* Загрузка строк файла в e.Lines ::= (e.Line)*;  e.Line ::= s.CHAR* */
  <LoadFile e.bfFileName>: e.Lines,
  /* Вывод строк файла на консоль и преобразование строк e.Lines => e.Symbols
  e.Symbols ::= (s.Char s.Row s.Col)*; s.Char ::= s.CHAR; s.Row ::= s.NUMBER; s.Col  ::= s.NUMBER */
  <DelAccumulator <MapAccum DoMapPrint 1 e.Lines>>: e.Symbols,
  /* Запуск лексического анализатора */
  <Tokenizer e.Symbols>:
  {
    /* Если Fails, то завершение программы */
    Fails e.Errors =	
      <Map DoMapPrintErrors e.Errors> 
      <Prout <RU 'FATAL_ERROR (99): Существуют несколько синтаксических ошибок.'>>
      <Exit 99>;
    e.Tokens = 
  },
  /* Запуск синтаксического анализатора */
  <Parser e.Tokens>: e.Parsing_Tree =
    /* Запуск компилятора в код C */
    <CompiletoC e.Parsing_Tree>
    /* Сохранение кода C в файл */
    <SaveFile e.bfFileName '.c'>
    /* Запуск интерпретатора */
    <Prout>
    <Interpretator e.Parsing_Tree>
}